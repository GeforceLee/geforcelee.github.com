<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UIAutomation | GeforceLee's Blog]]></title>
  <link href="http://GeforceLee.github.io/blog/categories/uiautomation/atom.xml" rel="self"/>
  <link href="http://GeforceLee.github.io/"/>
  <updated>2013-12-31T15:20:10+08:00</updated>
  <id>http://GeforceLee.github.io/</id>
  <author>
    <name><![CDATA[GeforceLee]]></name>
    <email><![CDATA[liyunlong880601@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS UI自动化测试]]></title>
    <link href="http://GeforceLee.github.io/blog/2013/11/08/ios-uizi-dong-hua-ce-shi/"/>
    <updated>2013-11-08T11:10:00+08:00</updated>
    <id>http://GeforceLee.github.io/blog/2013/11/08/ios-uizi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>经过近半年的创业经历,我们的团队在开发上发现了很多问题,也发现了很多重复的工作量,浪费了很多时间.所以我们开始了客户端测试的研究,这篇Blog是讲述UI自动化测试的简单记录.</p>

<p>不得不说Aplle在测试方面做了很多事情,Instruments这个工具非常强大.但之前我们也没有很好的利用,近期我们主要目标就是研究Instruments.</p>

<p>说了不少废话,现在来干货吧!</p>

<h3>第一个脚本</h3>

<p>先说一个Bug,当在Xcode直接用command+I命令直接启动Instruments,机器会很卡,然后执行起脚本也会出现各种问题.
所以就直接先把App按到对应的模拟器或真机上,然后再Instruments上选择target.这样运行起来会比较快(稍后会介绍更快的)
选择Automation,开始第一个脚本吧.</p>

<!--more -->


<p><img src="/images/UIAutomation/1.png"></p>

<p><img src="/images/UIAutomation/2.png"></p>

<p>这就是第一个脚本,里面可以用JS 写很多测试方法.</p>

<p><img src="/images/UIAutomation/3.png"></p>

<ul>
<li>点击Run的按钮就会执行脚本,</li>
<li>点击记录按钮就会自动的记录在app上的操作.</li>
</ul>


<p>这里有几个帮助的方法:</p>

<pre><code>var target = UIATarget.localTarget();
target.logElementTree();
</code></pre>

<p>这个方法在运行的时候会打印出当前屏幕上所有的元素,这样可以让我们写脚本更简单.</p>

<p><img src="/images/UIAutomation/4.png"></p>

<p>脚本该怎么写就不在文中提了,想看的话可以到<a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/UIAutomationRef/_index.html">脚本文档</a>来看</p>

<h4>写一个简单的例子</h4>

<p>一个TextFiled一个label的view.
在文本框中输入文字,然后点Return键,然后Label中在现实文本框中的文字.</p>

<p>在xib中可以设置这些属性
<img src="/images/UIAutomation/5.png"></p>

<pre><code>在xcode中的代码段:
- (BOOL)textFieldShouldReturn:(UITextField *)textField{
    NSString *str = textField.text;
    self.lbl.text = str;
    self.lbl.accessibilityValue = str;
    [self.textFiled resignFirstResponder];
    return YES;
}


在脚本中写的:

var testName = "Test 1";

var target = UIATarget.localTarget();

target.logElementTree();

var app = target.frontMostApp();

var window = app.mainWindow();

var str = "Text string";

window.textFields()[0].setValue(str);

app.keyboard().buttons()["Return"].tap();

target.logElementTree();

var textValue = window.staticTexts()["Label1"].value();

if (textValue === str){
    UIALogger.logPass(testName);
}else{
    UIALogger.logFail(testName);
}
</code></pre>

<p>运行一下.</p>

<h4>几个常用的库</h4>

<p>上面写不太友好,看的也不方便
可以用<a href="https://github.com/alexvollmer/tuneup_js">tuneup_js</a></p>

<p>为了更快,可以不启动Instruments下运行测试.用<a href="https://github.com/bendyworks/bwoken">bwoken</a></p>
]]></content>
  </entry>
  
</feed>
