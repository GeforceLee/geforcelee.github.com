<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Node.js | GeforceLee's Blog]]></title>
  <link href="http://GeforceLee.github.io/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://GeforceLee.github.io/"/>
  <updated>2013-11-08T15:34:55+08:00</updated>
  <id>http://GeforceLee.github.io/</id>
  <author>
    <name><![CDATA[GeforceLee]]></name>
    <email><![CDATA[liyunlong880601@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用node-apn发Apple Push]]></title>
    <link href="http://GeforceLee.github.io/blog/2013/07/12/use-node-apn-send-apple-push/"/>
    <updated>2013-07-12T18:23:00+08:00</updated>
    <id>http://GeforceLee.github.io/blog/2013/07/12/use-node-apn-send-apple-push</id>
    <content type="html"><![CDATA[<p>忙了一下午终于把这个Push弄完了</p>

<p>期间查了很多的资料都或多或少的遇到了些问题</p>

<p>废话不多说了</p>

<!-- more -->


<p>首先打开<code>要是串访问</code></p>

<p><img src="/images/nodeapn/130713_1.png"></p>

<p>选择<code>要是串访问</code>&ndash;><code>证书助理</code>&ndash;><code>从证书颁发机构请求证书</code>
<img src="/images/nodeapn/130713_2.png"></p>

<p>填写邮件和'常用名称'   这个'常用名称'随便填
之后就一直下一步,直到完成   桌面上会出现一个<code>CertificateSigningRequest.certSigningRequest</code> 文件</p>

<p>完成后在<code>秘钥</code>中会有你刚才生成的秘钥</p>

<p><img src="/images/nodeapn/130713_3.png"></p>

<p>点击右键 选择 <code>导出</code></p>

<p><img src="/images/nodeapn/130713_4.png"></p>

<p>保存到桌面</p>

<p>然后就要登陆 <a href="https://developer.apple.com">https://developer.apple.com</a></p>

<p>选择<code>Certificates, Identifiers &amp; Profiles</code></p>

<p><img src="/images/nodeapn/130713_5.png"></p>

<p><img src="/images/nodeapn/130713_6.png"></p>

<p>创建一个AppleId 记得把通知选项打开</p>

<p><img src="/images/nodeapn/130713_11.png"></p>

<p><img src="/images/nodeapn/130713_12.png"></p>

<p>选择在桌面<code>CertificateSigningRequest.certSigningRequest</code> 上传</p>

<p>生成后选择下载'aps_development.cer'到桌面</p>

<p>然后用新的AppleId 创建个证书
<img src="/images/nodeapn/130713_8.png">
<img src="/images/nodeapn/130713_9.png">
<img src="/images/nodeapn/130713_10.png"></p>

<p>接下来就是要在终端里输入命令了</p>

<pre><code>openssl x509 -in aps_development.cer -inform der -out cert.pem

openssl pkcs12 -in PushTest.p12 -out key.pem -nodes
</code></pre>

<p><img src="/images/nodeapn/130713_13.png"></p>

<p>生成好的这2个文件放到对应服务端代码所在的目录里</p>

<p>在服务端
node-apn : <a href="https://github.com/argon/node-apn">https://github.com/argon/node-apn</a></p>

<p>代码很简单:</p>

<pre><code>var apns = require('apn');
var options = {
    cert: './cert.pem',                 /* Certificate file path */
    key:  './key.pem',                  /* Key file path */
    gateway: 'gateway.sandbox.push.apple.com',/* gateway address */
    port: 2195,                       /* gateway port */
    errorCallback: errorHappened ,    /* Callback when error occurs function(err,notification) */
}; 
function errorHappened(err, notification){
    console.log("err " + err);
}
var apnsConnection = new apns.Connection(options);

var token = "30df54fd26XXXXXX……………………..";
var myDevice = new apns.Device(token);
var note = new apns.Notification();
note.expiry = Math.floor(Date.now() / 1000) + 100; // Expires 1 hour from now.
note.badge = 1;
note.sound = "ping.aiff";
note.alert = "Fuck you";
note.payload = {'messageFrom': 'Caroline'};
note.device = myDevice;

apnsConnection.sendNotification(note);
</code></pre>

<p>客户端:</p>

<p><img src="/images/nodeapn/130713_14.png"></p>

<p>选好新的证书</p>

<p>在Appdelegate里:</p>

<pre><code>- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken
{
    NSString *token = [[deviceToken description] stringByTrimmingCharactersInSet:[NSCharacterSet        characterSetWithCharactersInString:@"&lt;&gt;"]];
    token = [token stringByReplacingOccurrencesOfString:@" " withString:@""];
    NSLog(@"content---%@", token);
    [[NSUserDefaults standardUserDefaults] setValue:token forKey:@"deviceToken"];
}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error
{
    NSLog(@"push  注册失败");
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
        self.viewController = [[ViewController alloc] initWithNibName:@"ViewController_iPhone" bundle:nil];
    } else {
        self.viewController = [[ViewController alloc] initWithNibName:@"ViewController_iPad" bundle:nil];
    }
    self.window.rootViewController = self.viewController;
    [self.window makeKeyAndVisible];
    [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeBadge |      UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert]; 
    return YES;
}
</code></pre>

<p>基本上就是这些了</p>
]]></content>
  </entry>
  
</feed>
